// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: office2gw.proto

package tunnel

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type In_IpProtocol int32

const (
	In_IP  In_IpProtocol = 0
	In_TCP In_IpProtocol = 1
	In_UDP In_IpProtocol = 2
)

// Enum value maps for In_IpProtocol.
var (
	In_IpProtocol_name = map[int32]string{
		0: "IP",
		1: "TCP",
		2: "UDP",
	}
	In_IpProtocol_value = map[string]int32{
		"IP":  0,
		"TCP": 1,
		"UDP": 2,
	}
)

func (x In_IpProtocol) Enum() *In_IpProtocol {
	p := new(In_IpProtocol)
	*p = x
	return p
}

func (x In_IpProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (In_IpProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_office2gw_proto_enumTypes[0].Descriptor()
}

func (In_IpProtocol) Type() protoreflect.EnumType {
	return &file_office2gw_proto_enumTypes[0]
}

func (x In_IpProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use In_IpProtocol.Descriptor instead.
func (In_IpProtocol) EnumDescriptor() ([]byte, []int) {
	return file_office2gw_proto_rawDescGZIP(), []int{0, 0}
}

type Report_ReportEnum int32

const (
	Report_Test Report_ReportEnum = 0
	Report_Full Report_ReportEnum = 1
	Report_Bye  Report_ReportEnum = 2
)

// Enum value maps for Report_ReportEnum.
var (
	Report_ReportEnum_name = map[int32]string{
		0: "Test",
		1: "Full",
		2: "Bye",
	}
	Report_ReportEnum_value = map[string]int32{
		"Test": 0,
		"Full": 1,
		"Bye":  2,
	}
)

func (x Report_ReportEnum) Enum() *Report_ReportEnum {
	p := new(Report_ReportEnum)
	*p = x
	return p
}

func (x Report_ReportEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_ReportEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_office2gw_proto_enumTypes[1].Descriptor()
}

func (Report_ReportEnum) Type() protoreflect.EnumType {
	return &file_office2gw_proto_enumTypes[1]
}

func (x Report_ReportEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_ReportEnum.Descriptor instead.
func (Report_ReportEnum) EnumDescriptor() ([]byte, []int) {
	return file_office2gw_proto_rawDescGZIP(), []int{2, 0}
}

type Issue_BackPress int32

const (
	Issue_Free   Issue_BackPress = 0
	Issue_Press  Issue_BackPress = 1
	Issue_Finnal Issue_BackPress = 2
)

// Enum value maps for Issue_BackPress.
var (
	Issue_BackPress_name = map[int32]string{
		0: "Free",
		1: "Press",
		2: "Finnal",
	}
	Issue_BackPress_value = map[string]int32{
		"Free":   0,
		"Press":  1,
		"Finnal": 2,
	}
)

func (x Issue_BackPress) Enum() *Issue_BackPress {
	p := new(Issue_BackPress)
	*p = x
	return p
}

func (x Issue_BackPress) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Issue_BackPress) Descriptor() protoreflect.EnumDescriptor {
	return file_office2gw_proto_enumTypes[2].Descriptor()
}

func (Issue_BackPress) Type() protoreflect.EnumType {
	return &file_office2gw_proto_enumTypes[2]
}

func (x Issue_BackPress) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Issue_BackPress.Descriptor instead.
func (Issue_BackPress) EnumDescriptor() ([]byte, []int) {
	return file_office2gw_proto_rawDescGZIP(), []int{3, 0}
}

type In struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID     uint32        `protobuf:"fixed32,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Sip      uint32        `protobuf:"fixed32,2,opt,name=Sip,proto3" json:"Sip,omitempty"`
	Dip      uint32        `protobuf:"fixed32,3,opt,name=Dip,proto3" json:"Dip,omitempty"`
	Port     uint32        `protobuf:"fixed32,4,opt,name=Port,proto3" json:"Port,omitempty"`
	Protocol In_IpProtocol `protobuf:"varint,5,opt,name=Protocol,proto3,enum=tunnel.In_IpProtocol" json:"Protocol,omitempty"`
	Host     string        `protobuf:"bytes,6,opt,name=Host,proto3" json:"Host,omitempty"`
	Jwt      string        `protobuf:"bytes,7,opt,name=Jwt,proto3" json:"Jwt,omitempty"`
	Data     []byte        `protobuf:"bytes,8,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *In) Reset() {
	*x = In{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office2gw_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *In) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*In) ProtoMessage() {}

func (x *In) ProtoReflect() protoreflect.Message {
	mi := &file_office2gw_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use In.ProtoReflect.Descriptor instead.
func (*In) Descriptor() ([]byte, []int) {
	return file_office2gw_proto_rawDescGZIP(), []int{0}
}

func (x *In) GetUUID() uint32 {
	if x != nil {
		return x.UUID
	}
	return 0
}

func (x *In) GetSip() uint32 {
	if x != nil {
		return x.Sip
	}
	return 0
}

func (x *In) GetDip() uint32 {
	if x != nil {
		return x.Dip
	}
	return 0
}

func (x *In) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *In) GetProtocol() In_IpProtocol {
	if x != nil {
		return x.Protocol
	}
	return In_IP
}

func (x *In) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *In) GetJwt() string {
	if x != nil {
		return x.Jwt
	}
	return ""
}

func (x *In) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Out struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Out) Reset() {
	*x = Out{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office2gw_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Out) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Out) ProtoMessage() {}

func (x *Out) ProtoReflect() protoreflect.Message {
	mi := &file_office2gw_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Out.ProtoReflect.Descriptor instead.
func (*Out) Descriptor() ([]byte, []int) {
	return file_office2gw_proto_rawDescGZIP(), []int{1}
}

func (x *Out) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID      string            `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Report    Report_ReportEnum `protobuf:"varint,2,opt,name=Report,proto3,enum=tunnel.Report_ReportEnum" json:"Report,omitempty"`
	TimeStamp int64             `protobuf:"varint,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	Payload   []byte            `protobuf:"bytes,4,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office2gw_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_office2gw_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_office2gw_proto_rawDescGZIP(), []int{2}
}

func (x *Report) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Report) GetReport() Report_ReportEnum {
	if x != nil {
		return x.Report
	}
	return Report_Test
}

func (x *Report) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *Report) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID    string          `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Flag    Issue_BackPress `protobuf:"varint,2,opt,name=Flag,proto3,enum=tunnel.Issue_BackPress" json:"Flag,omitempty"`
	Payload []byte          `protobuf:"bytes,3,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *Issue) Reset() {
	*x = Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_office2gw_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_office2gw_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_office2gw_proto_rawDescGZIP(), []int{3}
}

func (x *Issue) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Issue) GetFlag() Issue_BackPress {
	if x != nil {
		return x.Flag
	}
	return Issue_Free
}

func (x *Issue) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_office2gw_proto protoreflect.FileDescriptor

var file_office2gw_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x32, 0x67, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xe5, 0x01, 0x0a, 0x02, 0x49, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x03, 0x53, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x03, 0x44, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x6e, 0x2e, 0x49, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x77, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4a, 0x77, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x0a, 0x49, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x50, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10,
	0x02, 0x22, 0x19, 0x0a, 0x03, 0x4f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x01, 0x0a,
	0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x06, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x29, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x79, 0x65, 0x10,
	0x02, 0x22, 0x90, 0x01, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x2b, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x50, 0x72, 0x65, 0x73, 0x73, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x2c, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x72, 0x65, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x50, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x6e,
	0x61, 0x6c, 0x10, 0x02, 0x32, 0x62, 0x0a, 0x09, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x32, 0x67,
	0x77, 0x12, 0x25, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0a, 0x2e, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x49, 0x6e, 0x1a, 0x0b, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f,
	0x75, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x0e, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_office2gw_proto_rawDescOnce sync.Once
	file_office2gw_proto_rawDescData = file_office2gw_proto_rawDesc
)

func file_office2gw_proto_rawDescGZIP() []byte {
	file_office2gw_proto_rawDescOnce.Do(func() {
		file_office2gw_proto_rawDescData = protoimpl.X.CompressGZIP(file_office2gw_proto_rawDescData)
	})
	return file_office2gw_proto_rawDescData
}

var file_office2gw_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_office2gw_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_office2gw_proto_goTypes = []interface{}{
	(In_IpProtocol)(0),     // 0: tunnel.In.IpProtocol
	(Report_ReportEnum)(0), // 1: tunnel.Report.ReportEnum
	(Issue_BackPress)(0),   // 2: tunnel.Issue.BackPress
	(*In)(nil),             // 3: tunnel.In
	(*Out)(nil),            // 4: tunnel.Out
	(*Report)(nil),         // 5: tunnel.Report
	(*Issue)(nil),          // 6: tunnel.Issue
}
var file_office2gw_proto_depIdxs = []int32{
	0, // 0: tunnel.In.Protocol:type_name -> tunnel.In.IpProtocol
	1, // 1: tunnel.Report.Report:type_name -> tunnel.Report.ReportEnum
	2, // 2: tunnel.Issue.Flag:type_name -> tunnel.Issue.BackPress
	3, // 3: tunnel.Office2gw.Data:input_type -> tunnel.In
	5, // 4: tunnel.Office2gw.Control:input_type -> tunnel.Report
	4, // 5: tunnel.Office2gw.Data:output_type -> tunnel.Out
	6, // 6: tunnel.Office2gw.Control:output_type -> tunnel.Issue
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_office2gw_proto_init() }
func file_office2gw_proto_init() {
	if File_office2gw_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_office2gw_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*In); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office2gw_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Out); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office2gw_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_office2gw_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_office2gw_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_office2gw_proto_goTypes,
		DependencyIndexes: file_office2gw_proto_depIdxs,
		EnumInfos:         file_office2gw_proto_enumTypes,
		MessageInfos:      file_office2gw_proto_msgTypes,
	}.Build()
	File_office2gw_proto = out.File
	file_office2gw_proto_rawDesc = nil
	file_office2gw_proto_goTypes = nil
	file_office2gw_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// Office2GwClient is the client API for Office2Gw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Office2GwClient interface {
	Data(ctx context.Context, opts ...grpc.CallOption) (Office2Gw_DataClient, error)
	Control(ctx context.Context, opts ...grpc.CallOption) (Office2Gw_ControlClient, error)
}

type office2GwClient struct {
	cc grpc.ClientConnInterface
}

func NewOffice2GwClient(cc grpc.ClientConnInterface) Office2GwClient {
	return &office2GwClient{cc}
}

func (c *office2GwClient) Data(ctx context.Context, opts ...grpc.CallOption) (Office2Gw_DataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Office2Gw_serviceDesc.Streams[0], "/tunnel.Office2gw/Data", opts...)
	if err != nil {
		return nil, err
	}
	x := &office2GwDataClient{stream}
	return x, nil
}

type Office2Gw_DataClient interface {
	Send(*In) error
	Recv() (*Out, error)
	grpc.ClientStream
}

type office2GwDataClient struct {
	grpc.ClientStream
}

func (x *office2GwDataClient) Send(m *In) error {
	return x.ClientStream.SendMsg(m)
}

func (x *office2GwDataClient) Recv() (*Out, error) {
	m := new(Out)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *office2GwClient) Control(ctx context.Context, opts ...grpc.CallOption) (Office2Gw_ControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Office2Gw_serviceDesc.Streams[1], "/tunnel.Office2gw/Control", opts...)
	if err != nil {
		return nil, err
	}
	x := &office2GwControlClient{stream}
	return x, nil
}

type Office2Gw_ControlClient interface {
	Send(*Report) error
	Recv() (*Issue, error)
	grpc.ClientStream
}

type office2GwControlClient struct {
	grpc.ClientStream
}

func (x *office2GwControlClient) Send(m *Report) error {
	return x.ClientStream.SendMsg(m)
}

func (x *office2GwControlClient) Recv() (*Issue, error) {
	m := new(Issue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Office2GwServer is the server API for Office2Gw service.
type Office2GwServer interface {
	Data(Office2Gw_DataServer) error
	Control(Office2Gw_ControlServer) error
}

// UnimplementedOffice2GwServer can be embedded to have forward compatible implementations.
type UnimplementedOffice2GwServer struct {
}

func (*UnimplementedOffice2GwServer) Data(Office2Gw_DataServer) error {
	return status.Errorf(codes.Unimplemented, "method Data not implemented")
}
func (*UnimplementedOffice2GwServer) Control(Office2Gw_ControlServer) error {
	return status.Errorf(codes.Unimplemented, "method Control not implemented")
}

func RegisterOffice2GwServer(s *grpc.Server, srv Office2GwServer) {
	s.RegisterService(&_Office2Gw_serviceDesc, srv)
}

func _Office2Gw_Data_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Office2GwServer).Data(&office2GwDataServer{stream})
}

type Office2Gw_DataServer interface {
	Send(*Out) error
	Recv() (*In, error)
	grpc.ServerStream
}

type office2GwDataServer struct {
	grpc.ServerStream
}

func (x *office2GwDataServer) Send(m *Out) error {
	return x.ServerStream.SendMsg(m)
}

func (x *office2GwDataServer) Recv() (*In, error) {
	m := new(In)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Office2Gw_Control_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Office2GwServer).Control(&office2GwControlServer{stream})
}

type Office2Gw_ControlServer interface {
	Send(*Issue) error
	Recv() (*Report, error)
	grpc.ServerStream
}

type office2GwControlServer struct {
	grpc.ServerStream
}

func (x *office2GwControlServer) Send(m *Issue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *office2GwControlServer) Recv() (*Report, error) {
	m := new(Report)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Office2Gw_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.Office2gw",
	HandlerType: (*Office2GwServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Data",
			Handler:       _Office2Gw_Data_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Control",
			Handler:       _Office2Gw_Control_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "office2gw.proto",
}
